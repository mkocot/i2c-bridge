#define FSM_EVENT_TYPE unsigned short
// #include "states.h"

#include <Arduino.h>
#include <variant>
// #include <SimpleCLI.h>
// #include <SPI.h>
// #include <SPISlave.h>

#include <Adafruit_BMP280.h>
#include <Adafruit_AHTX0.h>

#ifdef ARDUINO_ARCH_ESP8266
#define A6 (-1)
#define A7 (-1)
#define D11 (-1)
#define D12 (-1)
#define D13 (-1)
#endif
// Choosen becase they fit nicely on front of board
// [                D13]
// [                D12]
// [                D11]
// [A4  A5  A6  A7  D10]
// A4 - SDA
// A5 - SCL
// A6 - SCL_BANK_1 (bit-bang)
// A7 - SCL_BANK_2 (bit-bang)
// D10..D13 as more alternate I2C, they will nicely create long line
// one after another
constexpr auto SCL_BANK_0 = SCL;
constexpr auto SCL_BANK_1 = A6;
constexpr auto SCL_BANK_2 = A7;
constexpr auto SCL_BANK_3 = D10;
constexpr auto SCL_BANK_4 = D11;
constexpr auto SCL_BANK_5 = D12;
constexpr auto SCL_BANK_6 = D13;

// Only D2 and D3 supports INT interrupts
// we might later choose PCINT if beneficial
constexpr auto CMD_PIN = D2;

Adafruit_AHTX0 *ahtx0{nullptr};
Adafruit_BMP280 *bmp280{nullptr};

// I2C
//      ESP8266 LGT
// SDA  D2      A4
// SCL  D1      A5

static void beginWireAt(int sda, int scl)
{
}

void setup()
{
  Serial.begin(9600);
  while(!Serial) {
    delay(100);
  }
  delay(2000);

  Serial.println("Start detecting sensors");
  Wire.begin();

  ahtx0 = new Adafruit_AHTX0();

  if (!ahtx0->begin(&Wire, 0, AHTX0_I2CADDR_DEFAULT))
  {
    Serial.println("AHTx0 detected");
  }
  else
  {
    Serial.println("AHTx0 NOT detected");
    delete ahtx0;
  }

  // #ifndef ARDUINO_ARCH_ESP8266
  // Wire.end();
  // #endif

  // Wire.begin();
  
  bmp280 = new Adafruit_BMP280(&Wire);

  if (bmp280->begin(BMP280_ADDRESS))
  {
    Serial.println("BMP280 detected at default ADDR");
    bmp280->setSampling(
      /* mode */
      Adafruit_BMP280::MODE_FORCED,
      /* temp */
      Adafruit_BMP280::SAMPLING_X1,
      // pressure
      Adafruit_BMP280::SAMPLING_X1,
      Adafruit_BMP280::FILTER_OFF
    );
  }
  else
  {
    Serial.printf("BMP280 NOT detected: %d\n", 0);
    delete bmp280;
  }

}

enum FSM_STATE
{
  STATE_INIT,
  STATE_READ_ID,
  STATE_READ_LEN,
  STATE_READ_DATA,
  STATE_READ_CRC8,
};
enum FSM_EVENT 
{
  EVENT_DATA,
  EVENT_TIMEOUT,
  EVENT_CRC_ERROR,
  EVENT_FAILURE
};

static auto fsm_state = STATE_INIT;

static uint8_t cmd_id;

class CommandParser;

class State {
  public:
  // [enter?] handle [exit?]
  virtual void handle(uint8_t event) = 0;
  // called after state change to this instance
  // virtual void enter() {}
  // called after before state change
  // virtual void exit() {}
  virtual ~State() {};

};



class InitState : public State {
  virtual void handle(uint8_t event) {}
};

class ReadIdState : public State {
  virtual void handle(uint8_t event) {}
};

class ReadLenState : public State {
  virtual void handle(uint8_t event) {}
};
class ReadDataState: public State {
  virtual void handle(uint8_t event) {}
};
class ReadCrc8State: public State {
  virtual void handle(uint8_t event) {}
};


class CommandParser
{
  private:
  State *a;

  public:
  CommandParser(): a(new InitState{})
  {
  }

  void transition(FSM_STATE newState)
  {
    // a->exit();
    switch(newState)
    {
      case STATE_INIT:
      case STATE_READ_CRC8:
      case STATE_READ_DATA:
      case STATE_READ_ID:
      case STATE_READ_LEN:
      default:
      break; 
    }
    // a->enter();
  }
  void onEvent(FSM_EVENT event, uint8_t data)
  {
    a->handle(data);
  }
};

CommandParser arser{};
ReadIdState state{};

static void onEvent(uint8_t event)
{
  if (fsm_state == STATE_INIT) {
    cmd_id = event;
  }
}

static void fetch_values()
{
  float temp = NAN;
  float hum = NAN;
  float pressure; /* resolved to real or NAN later*/
  sensors_event_t aht_temp, aht_hum;

  if (bmp280 != nullptr && bmp280->takeForcedMeasurement())
  {
    temp = bmp280->readTemperature();
    pressure = bmp280->readPressure();
  }
  else
  {
    pressure = NAN;
  }

  if (ahtx0 != nullptr && ahtx0->getEvent(&aht_temp, &aht_hum)) {
    temp = aht_temp.temperature;
    hum = aht_hum.relative_humidity;
  }
  Serial.printf("Data: %f %f %f\n", temp, hum, pressure);
}

void loop()
{
  fetch_values();
  delay(10000);
}

// volatile uint8_t cmd_initialized = 0;

// static void enable_bank(uint8_t bank_id);
// static void disable_bank(uint8_t bank_id);
// static bool in_cmd_mode();

// static void scan_i2c();
// static void check_command();

// // ISR function
// static void int_exit_cmd_mode();

// STATE  INPUT
// INIT   'R'ead
// INIT   'W'rite
// INIT   'E'nable
// INIT   'D'isable

// Based on Adafruit BusIo, following methods are used:
// wire->begin(); // initialize protocol this can be used only on our side without exposing
// wire->end(); // beut is never called, keept it on our side
// wire->beginTransmission(addr)
// wire->endTransmission()
// wire->write(buffer, len)
// wire->requestFrom (without begin/end)
// wire->read()
// wire->setClock
// Prefix all messages
// B[A} - 2 bytes BEGIN + ADDRESS
// E    - 1 byte END
// W[L][DATA] - 1 byte W + 1 byte L + L bytes
// R[A + S][L] - 1 byte R, A 7 bits address + 1 bit stop, L 1 byte length
// C[CK] - 1 byte C, 2 bytes speed

// Notes: write should always be betwwen begin() and end()
// begin and end is transaction that should not be violated, and requests 'mid fly' should return error
// end is optional so begin() will always start new transaction

// enum {
// STATE_INIT = FSM_STATE_INIT,
// STATE_ACTIVE,
// STATE_READ_FIRST_LETTER,

// STATE_ACTIVE_ID,

// STATE_READ_LENGTH,

// STATE_WRITE_LENGTH,

// STATE_ENABLE_ID,

// STATE_DISABLE_ID,

// STATE_GET_BANK_ARG,
// STATE_GET_ARG,
// STATE_GET_ADDRESS_ARG,

// STATE_FAIL = FSM_STATE_FAIL,
// };

// enum {
// EVENT_RESET = 0x0100,
// EVENT_DATA_AVAILABLE,
// };

// struct state_t {
//   uint8_t scl_banks = 0; // bitmap of active ports

//   // 1) BANK
//   // 2) ADDRESS
//   // We can assume ADDRESS > 127 -> disabled
//   uint8_t scl_current = 0;
//   uint8_t scl_direction = 0; // 0 - disabled, 1 - read, 2 write
//   uint8_t scl_amount = 0;
//   uint8_t scl_address = 0;
//   uint8_t data;
//   #define cmd_initialized cmd_initialized
//   #undef cmd_initialized
// };

// static int accept_a(fsm_event_t event)
// {
//   return event == 'A';
// }

// static int accept_r(fsm_event_t event) { return event == 'R'; }
// static int accept_w(fsm_event_t event) { return event == 'W'; }
// static int accept_e(fsm_event_t event) { return event == 'E'; }
// static int accept_d(fsm_event_t event) { return event == 'D'; }
// static int accept_bank_id(fsm_event_t event) {
//   return event >= 0 && event < 7;
// }
// static int accept_any(fsm_event_t event) {
//   return 1;
// }

// static void set_active_bank(struct fsm_t *fsm) {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   state->scl_current = fsm_current_event(fsm);
// }

// static void set_amount_read(struct fsm_t *fsm) {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   state->scl_direction = 1;
//   state->scl_amount = fsm_current_event(fsm);
// }

// static void set_amount_write(struct fsm_t *fsm) {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   state->scl_direction = -1;
//   state->scl_amount = fsm_current_event(fsm);
// }

// static void enable_bank(struct fsm_t *fsm) {
//   enable_bank(fsm->event);
// }

// static void disable_bank(struct fsm_t *fsm) {
//   disable_bank(fsm->event);
// }

// static void reset_state() {
// }
// static int get_event(fsm_event_t *event);

// static fsm_state_t read_command(struct fsm_t *fsm) {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   state->data = Serial.read();
//   switch(state->data) {
//     case 'R':
//       state->scl_direction = 1;
//       return STATE_GET_ARG;
//     case 'W':
//       state->scl_direction = -1;
//       return STATE_GET_ARG;
//     case 'A':
//     case 'E':
//     case 'D':
//     return STATE_GET_BANK_ARG;
//   }

//   return STATE_INIT;
// }

// static fsm_state_t read_arg(struct fsm_t *fsm) {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   state->scl_amount = Serial.read();
//   return STATE_INIT;
// }

// static fsm_state_t read_address_arg(struct fsm_t *fsm) {
//   auto address = Serial.read();
//   if (address < 0 || address >= 127) {
//     return STATE_INIT;
//   }

//   struct state_t *state = (struct state_t*)fsm_private(fsm);

//   state->scl_address = address;
// }

// static fsm_state_t read_bank_arg(struct fsm_t *fsm) {
//   auto bank_id = Serial.read();
//   if (bank_id < 0 || bank_id >= 7) {
//     return STATE_INIT;
//   }

//   // execute action
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   if (state->data == 'A') {
//     state->scl_current = bank_id;
//     state->scl_direction = 0;
//     state->scl_address = 0xFF;
//     return STATE_GET_ADDRESS_ARG;
//   } else if (state->data == 'E') {
//     enable_bank(bank_id);
//   } else if (state->data == 'D') {
//     disable_bank(bank_id);
//   } else {
//     // unknown
//   }
//   return STATE_INIT;
// }

// static void read_byte()
// {
//   struct state_t *state = (struct state_t*)fsm_private(fsm);
//   switch(state->data)
//   {

//   }

//   return STATE_INIT;
// }
// // INIT -EVENT_DATA-> READ_CMD
// // READ_CMD -> READ_ANY
// fsm_row_t states[] = {
//   {STATE_INIT, EVENT_DATA_AVAILABLE, read_command},
//   {STATE_GET_ARG, EVENT_DATA_AVAILABLE, read_arg},
//   {STATE_GET_BANK_ARG, EVENT_DATA_AVAILABLE, read_bank_arg},
//   {STATE_GET_ADDRESS_ARG, EVENT_DATA_AVAILABLE, read_address_arg},

//   // {STATE_INIT,    accept_a, NULL, STATE_ACTIVE_ID},
//   // {STATE_ACTIVE,  accept_r, NULL, STATE_READ_LENGTH},
//   // {STATE_ACTIVE,  accept_w, NULL, STATE_WRITE_LENGTH},

//   // {STATE_INIT,    accept_e, NULL, STATE_ENABLE_ID},
//   // {STATE_ACTIVE,  accept_e, NULL, STATE_ENABLE_ID},
//   // {STATE_INIT,    accept_d, NULL, STATE_DISABLE_ID},
//   // {STATE_ACTIVE,  accept_d, NULL, STATE_DISABLE_ID},

//   // {STATE_ACTIVE_ID, accept_bank_id, set_active_bank, STATE_ACTIVE},

//   // {STATE_READ_LENGTH, NULL, set_amount_read, STATE_ACTIVE},

//   // {STATE_WRITE_LENGTH, NULL, set_amount_write, STATE_ACTIVE},

//   // {STATE_ENABLE_ID, NULL, enable_bank, STATE_INIT},

//   // {STATE_DISABLE_ID, NULL, disable_bank, STATE_INIT},

//   // // Failures (added last due to catch-all)
//   // {STATE_ACTIVE, NULL, NULL, STATE_INIT},
//   // {STATE_ACTIVE_ID, NULL, NULL, STATE_INIT},
//   // {STATE_READ_LENGTH, NULL, NULL, STATE_INIT},
//   // {STATE_WRITE_LENGTH, NULL, NULL, STATE_INIT},
//   // {STATE_ENABLE_ID, NULL, NULL, STATE_INIT},
//   // {STATE_DISABLE_ID, NULL, NULL, STATE_INIT}
// };

#if 0
enum fsm_state : uint8_t
{
  STATE_B = 'B',
  STATE_E = 'E',
  STATE_W = 'W',
  STATE_R = 'R',
  STATE_C = 'C',
  STATE_INIT = '0',
  STATE_INITIALIZED = '1',
};

struct fsm_s
{
  uint8_t state;
  union
  {
    uint8_t bits;
    uint8_t on_enter : 1;
  } flags;

  // data
  struct
  {
    uint8_t address;
    uint8_t bank;
    uint8_t remaining;
    uint16_t clock;
    union
    {
      int has_address : 1;
      int bits;
    } flags;
  } data;
};

typedef struct fsm_s *fsm_t;

void fsm_init(fsm_t fsm)
{
  fsm->state = STATE_INIT;
}

void fsm_fail(fsm_t fsm)
{
  Serial.println("#KO");

  // Wire.end();
  fsm->state = STATE_INIT;
  fsm->flags.bits = 0;
  memset(&fsm->data, 0, sizeof(fsm->data));
}

void fsm_event(fsm_t fsm, uint8_t event)
{
  if (fsm->state == STATE_INITIALIZED)
  {
    switch (event)
    {
    case STATE_E:
    case STATE_W:
    case STATE_R:
    case STATE_C:
      fsm->state = event;
      break;
    default:
      fsm_fail(fsm);
      break;
    }
  }
  else if (fsm->state == STATE_INIT)
  {
    if (event == STATE_B)
    {
      fsm->state = STATE_B;
      fsm->data.flags.bits = 0;
    }
    // else go to init
  }
  else if (fsm->state == STATE_B)
  {
    if (fsm->data.flags.has_address || (!fsm->data.flags.has_address && event <= 0x7F))
    {
      // unexpected request, move to init
      fsm_fail(fsm);
    }
    else
    {
      fsm->data.flags.has_address = true;
      fsm->flags.on_enter = true;
      fsm->data.address = event;
      fsm->state = STATE_INITIALIZED;

      Wire.begin();
      Serial.println("#OK");
    }
  }
  else if (fsm->state == STATE_E)
  {
    // TODO: finish current wire communication and move to init
    fsm->state = STATE_INIT;
    Serial.println("#OK");
  }
  else if (fsm->state == STATE_W)
  {
    if (fsm->flags.on_enter)
    {
      fsm->flags.on_enter = false;
      if (event > 0)
      {
        fsm->data.remaining = event;
      }
      else
      {
        // invlid argument go back to init
        fsm_fail(fsm);
      }
    }
    else
    {
      while(fsm->data.remaining) {
        if (Wire.write(&event, 1) != 1) {
          break;
        }
      }
      // reading done,
      if (fsm->data.remaining == 0) {
        Serial.println("#OK");
        fsm->state = STATE_INITIALIZED;
      } else {
        fsm_fail(fsm);
      }
    }
  }
  else if (fsm->state == STATE_R)
  {
    if (event > 0)
    {
      fsm->data.remaining = event;
      while (fsm->data.remaining--)
      {
        // TODO: read and respond
        uint8_t raw_byte;
        if (Wire.readBytes(&raw_byte, 1) == 1) {
          if (Serial.write(&raw_byte, 1) != 1) {
            break;
          }
        } else {
          break;
        }
      }
      if (fsm->data.remaining == 0) {
        Serial.println("#OK");
        fsm->state = STATE_INITIALIZED;
      } else {
        fsm_fail(fsm);
      }
    }
    else
    {
      fsm_fail(fsm);
    }
  }
  else if (fsm->state == STATE_C)
  {
    if (fsm->flags.on_enter)
    {
      fsm->flags.on_enter = false;
      fsm->data.clock = event;
    }
    else
    {
      fsm->data.clock = fsm->data.clock << 8 | event;
      Wire.setClock(fsm->data.clock);
      Serial.println("#OK");
    }
    fsm->state = STATE_INITIALIZED;
  }
  else
  {
    // unknown code, go back to init
    fsm_fail(fsm);
  }
}


struct LLEntry {
  
};

static void handle_init_sensor(cmd *cmd)
{
  // TYPE BMP280, BPM280, SHT30, SHT40, BMPSHT,
  // BMPSHT combo with SHT30 AND BMP280
  // BANK (optional, default 0)
  // ADDRESS (optional, default whatever sensor default is)

  // Returns ID of sensor, to be used with `fetch_sensor` command
  const Command c{cmd};
  c.getArg("type");
  c.getArg("bank");
  c.getArg("address");
}

static void handle_deinit_sensor(cmd *cmd)
{
  const Command c{cmd};
  c.getArg("id");
}

static void handle_sensor_read(cmd *cmd)
{
  // returned format is always
  // 4 bytes (float)  TEMPERATURE
  // 4 bytes (uint32) PRESSURE
  // 2 bytes (uint16) HUMIDITY

  // oxFF... is INVALID and marks MISSING data
  const Command c{cmd};
  c.getArg("id");
}

static void handle_fetch_sensors(cmd *cmd)
{
  // 
}

SimpleCLI cmds{};

static void setup_cmds()
{
  auto cmd = cmds.addCmd("init_sensor", handle_init_sensor);
  cmd.addArg("type");
  cmd.addArg("bank");
  cmd.addArg("address");

  cmd = cmds.addCmd("deinit_sensor", handle_deinit_sensor);
  cmd.addArg("id");

  cmd = cmds.addSingleArgCmd("fetch_sensor", handle_sensor_read);
  cmd.addArg("id");

  cmd = cmds.addCmd("fetch_sensors");
}
#endif

#if 0
static void spi_received (uint8_t *data, size_t len)
{
  // Register 208 -> return 
  Serial.printf("SPI data: len=%d\n", len);
}

static void spi_data_transferred()
{
  Serial.println("SPI data transferred");
}

static void spi_status_update(uint32_t status)
{
  Serial.printf("SPI status: %d\n", status);
}

static void spi_status_transferred()
{
  Serial.println("SPI status transferred");
}
void setup()
{
  // NOTE: There is no option to change SDA, SCL pins for HW I2C
  Serial.begin(9600);
  while (!Serial)
  {
    // WAIT
    delay(1);
  }
  delay(2000);
  // Enable Wire
  // Wire.begin();

  Serial.println("#OPERATIONAL");

  // D5 - CLK
  // D6 - MISO
  // D7 - MOSI
  // D8 - CS
  #if 0
  SPISlave.begin();
  SPISlave.onData(spi_received);
  SPISlave.onDataSent(spi_data_transferred);
  SPISlave.onStatus(spi_status_update);
  SPISlave.onStatusSent(spi_status_transferred);
  #endif
}

void loop()
{
  // if (!Serial.available())
  // {
  //   yield();
  //   return;
  // }

  // Serial.read();
}

  #endif
#if 0
void scan_i2c()
{
  int nDevices = 0;

  Serial.println("Scanning...");

  for (byte address = 1; address < 127; ++address)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    byte error = Wire.endTransmission();

    if (error == 0)
    {
      Serial.print("I2C device found at address 0x");
      if (address < 16)
      {
        Serial.print("0");
      }
      Serial.print(address, HEX);
      Serial.println("  !");

      ++nDevices;
    }
    else if (error == 4)
    {
      Serial.print("Unknown error at address 0x");
      if (address < 16)
      {
        Serial.print("0");
      }
      Serial.println(address, HEX);
    }
  }
  if (nDevices == 0)
  {
    Serial.println("No I2C devices found\n");
  }
  else
  {
    Serial.println("done\n");
  }
}
#endif